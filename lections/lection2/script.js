// Явное приведение типов

let numberFromString = Number("12");
console.log(numberFromString - 1); // 11 - строка "12" была переведена в число, и операция вычитания прошла успешно
let numberToString = String(numberFromString);
console.log(numberToString.length); // 2 - numberToString — это строка, так как у числа нет свойства length

let pass = prompt("Введите пароль");
pass = Number(pass); // приведение к числу
pass = String(pass); // приведение к строке

// Неявное приведение типов

let stringNumber1 = "12";
let realNumber = 1;
console.log(stringNumber1 + realNumber); // "121" - получили строку из соединения первой переменной и второй, вторая переменная была преобразована в строку
console.log(stringNumber1 - realNumber); // 11 - получили число, так как при вычитании строка была преобразована в число

let stringNumber2 = "12";
console.log(!true); // false -- оператор отрицания инвертировал значение нашей булевой переменной.
console.log(!!stringNumber2); // true — получили логическое значение «правда», так как наша строка была не пустой. Обратите внимание, как используется оператор отрицания для приведения к булеву типу, тут он использован дважды: !!

// Равенство
// Есть четыре оператора проверки на равенство: == (нестрогое равенство), === (строгое равенство), != (нестрогое неравенство) и !== (строгое неравенство).

let a = "42";
let b = 42;
a == b; // true
a === b; // false

// Сравнения

let c = 41;
let d = "42";
let f = "43";
c < d; // true
d < f; // true

// Унарные и бинарные операторы

let g = 1;
g = -g; // унарный минус
let h = 1;
let j = 2;
h + j; // бинарный плюс

// Проверка, есть ли значение
let q;
if (q) {
  console.log(q);
}

// Приведение строки к числу. Чтобы явно привести строку в число, можно воспользоваться оператором +, который, будучи поставленным перед переменной, приводит её значение в числовой тип.

let w = "42";
const res1 = +w + 3; // 45

// Приведение числа в строку. Для приведения числа к строке часто вообще ничего не приходится делать, так как при сложении с другой строкой число автоматически будет приведено к строке. При необходимости явно привести число к строке можно воспользоваться конструктором типа строки String() или сложить наше число с пустой строкой
let e = 42;
const res2 = e + ""; // "42" - сложение с пустой строкой приводит число в строку.

// Приведение к булеву типу. проверка, пустой ли у нас массив, делается проверкой свойства length. Когда массив пустой, в этом свойстве мы получаем значение 0, которое преобразуется при проверке условия в false
let r = [];
if (r.length) {
  console.log(r); // не отработает, так как r.length равно 0, и это falsy значение.
}

alert(`Всплывающая подсказка на странице`);
let personName = prompt("Как вас зовут?");
prompt(`Сколько Вам полных лет?`, 21);
alert(`Добро пожаловать на сайт ${personName}`);
confirm(`Продолжить действия?`);
confirm();

// Ветвление
let x = 5;
let y = 42;
if (x > y) {
  alert(x + y); // сложить значения переменных если условие верно
} else {
  alert(x * y); // умножить значения переменных если условие ложно
}

// Тернарный оператор
// (Условие) ? действия при true : действия при false
let u = 10;
let i = 15;
let max = u > i ? u : i;
alert(max);

// Игра в загадки
// let userAnswer = prompt(`Зимой и летом одним цветом?`);
// if (userAnswer === "") {
//   console.log("Нет ответа");
// } else {
//   if (userAnswer === "Ёлка") {
//     alert(`Молодец!`);
//   } else {
//     alert(`Не угадал...`);
//   }
// }

// let userAnswer = prompt(`Зимой и летом одним цветом?`);
// if (userAnswer === "") {
//   alert("Нет ответа");
// } else if (userAnswer === "Ёлка") {
//   alert(`Молодец!`);
// } else {
//   alert(`Не угадал...`);
// }

let userAnswer = prompt(`Зимой и летом одним цветом?`);
alert(userAnswer.toLowerCase() === "елка" ? "Молодец!" : "Не угадал..."); // toLowerCase() - приведение к нижнему регистру, toUpperCase - к верхнему
